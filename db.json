{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.JPG","path":"img/avatar.JPG","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489504553000},{"_id":"source/.DS_Store","hash":"1edb38059ff9531a9cba953bd7d71e45c66ac9cb","modified":1490170315000},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1489504553000},{"_id":"themes/huxblog/_config.yml","hash":"9f9e8dc20c790243534640a9213e1fe2481900e5","modified":1490167806000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1489504553000},{"_id":"source/_posts/js原型对象1.md","hash":"fe1e8674d406d970337bf6951a0721cb0e29e330","modified":1490182244000},{"_id":"source/_posts/js原型对象2.md","hash":"734cae7142c37239ccb4716a2ee8f308a6f7b995","modified":1490182250000},{"_id":"source/_posts/with.md","hash":"d316c99fc66d0281e6c2b14094ec3aaf69c8a857","modified":1490182070000},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1490171473000},{"_id":"source/archives/index.md","hash":"f30bcd9cd0fbe690c2398f21dbf27e56c0c72499","modified":1489504553000},{"_id":"source/img/avatar.JPG","hash":"9b31963b9b9bf723907c1d01874f7fbb9b0097f6","modified":1486541186000},{"_id":"source/about/index.md","hash":"05d70006cb5a13f04fc418aca8977097c04163ab","modified":1490182368000},{"_id":"source/img/favicon.ico","hash":"04684e0b8027ffd025f0a7a29b69b6ed54518634","modified":1490170729000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1489504553000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1489504553000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1489504553000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1489504553000},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1489504553000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1489504553000},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1489504553000},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1489504553000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1489504553000},{"_id":"themes/huxblog/layout/page.ejs","hash":"ebf84834fb0aef872ed99cd1c8b67265aed47ded","modified":1490172716000},{"_id":"themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1489504553000},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1489504553000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"4e9c1579ab423d0fe85aeedfd29f4a2240902a00","modified":1489539821000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1489504553000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1489504553000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1489504553000},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"87c544a64ea49b835330135a616deb2e9fd39bbb","modified":1489539240000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1489504553000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"c18efcf5d21c782f6a6f2cb399b552310520cf44","modified":1490172505000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1489504553000},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1489504553000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1489504553000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1489504553000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1489504553000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1489504553000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1489504553000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1489504553000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1489504553000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1489504553000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1489504553000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1489504553000},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1489504553000},{"_id":"source/_posts/with/post-bg-js-module.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1490181824000},{"_id":"source/_posts/with/post-bg-unix-linux.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1490181843000},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1489504553000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1489504553000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1489504553000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1489504553000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489504553000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1489504553000},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1489504553000},{"_id":"source/_posts/with/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1490181517000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1489504553000},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1489504553000}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-03-14T15:15:53.000Z","updated":"2017-03-14T15:15:53.000Z","path":"404.html","title":"","comments":1,"_id":"cj0kw0lrs0000kxjdiui0g8hg","content":"","excerpt":"","more":""},{"layout":"archives","title":"Archives","description":"Hey, this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"Hey, this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-03-14T15:15:53.000Z","updated":"2017-03-14T15:15:53.000Z","path":"archives/index.html","comments":1,"_id":"cj0kw0lsw0002kxjd80zcqhih","content":"","excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"","header-img":"img/about-bg.jpg","comments":1,"_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>\n","updated":"2017-03-22T11:32:48.000Z","path":"about/index.html","_id":"cj0kw0lt10004kxjdv74sn7vn","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"external\">李书航 － 什么是「共产中文腔调」？ </a><br></p>\n","excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a><br></p>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-03-14T15:15:53.000Z","updated":"2017-03-14T15:15:53.000Z","path":"tags/index.html","comments":1,"_id":"cj0kw0lt50007kxjd6d8c7um8","content":"","excerpt":"","more":""}],"Post":[{"title":"js原型对象1","date":"2017-03-20T11:28:35.000Z","author":"古朋","_content":"## 为什么要写原型对象？\n\n原型，其实已经是前端知识中老生常谈的内容了。很多初学者和工作者其实都觉得这个概念其实跟你使用JavaScript没有太大的联系（因为我刚开始其实就是这样）。但是当你深入到代码中，一些架构中的时候，你就会发现巧妙的运用原型，能让你的代码写的既简洁又优美\n\n\n\n## 什么是原型对象\n\n无论什么时候，**只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性**，这个**属性**指向**函数**的**原型对象**\n\n举个栗子：\n\n```javascript\nfunction Person{\n}\nPerson.prototype.name = \"Nicholas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function(){\n\talert(this.name);\n};\n\nvar person1 = new Person();\nperson1.sayName(); //\"Nicholas\"\n\nvar person2 = new Person();\nperson2.sayName(); //\"Nicholas\"\n\nalert(person1.sayName == person2.sayName); //true\n```\n\n如下图图一所示，针对于上面的“栗子”，`Person`是一个函数，那么在 JavaScript中就会为这个函数创建一个prototype的属性，这个prototype属性指向该函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性指向该函数。\n\n\n![图一](http://upload-images.jianshu.io/upload_images/5099107-8d025db6f9977c21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n如上图图一所示：当调用构造函数创建一个新实例（person1和person2）后，该实例的内部将包含一个指针，指向构造函数的原型对象（Person Prototype）。\n\n\n\n## 原型对象的属性查找机制\n\n查找机制是这样的：**首先会先在实例上面搜索属性，如果找到了直接返回，否则就继续去原型上面寻找**。\n\n说个**形象一点的故事**，这样好理解一点。假设：实例就是你，原型就是你的父亲。你的有些东西是继承自你的父亲。比如你父亲在北京有一套价值1000W的别墅，他作为不动产留给了你。你自己也通过自己的努力，积攒了300W的积蓄。这个时候，你急需要用钱，你改怎么办？**首先你会看你自己有没有这个符合条件的积蓄，如果有，那么就用掉自己的积蓄，如果没有，那么就只能用父亲的房子作抵押给别人了。**\n\n先来个栗子：\n\n```javascript\nfunction Person(){\n}\n\nPerson.prototype.money = \"1000W\";\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.money = \"300W\";\nalert(person1.money); //\"300W\"----来自实例，是自己的钱\nalert(person2.money); //\"1000W\"----来自原型，是父亲的钱\n```\n\n从上面的例子我们能发现，当在alert()中访问person1.money时，他就会去实例上面搜索一个名为money的属性。这个属性在person1实例中找到了，直接返回。同理在person2的实例中寻找money属性时，没有找到，这时就需要继续去原型寻找，这个时候找到了，于是返回原型上面的值。\n\n\n\n## 如何判断属性值是来自实例还是原型？\n\n在了解完上面的知识之后，有的人就会问了，那我在写代码的时候，如何去判断属性值是来自实例的，还是来自原型对象上面的？就是说我想知道那个钱，到底我自己的积蓄，还是用的我父亲的房子。这个时候我就可以借助方法hasOwnProperty()，**当属性值是来自实例，也就是说是自己的钱，那么返回true，否则返回false**\n\n来段代码来看看：\n\n```javascript\nfunction Person(){\n}\n\nPerson.prototype.money = \"1000W\";\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.money = \"300W\";\nalert(person1.hasOwnProperty(money)); //true----来自实例，是自己的钱\nalert(person2.hasOwnProperty(money)); //false----来自原型，是父亲的钱\n```\n这一部分讲完了，可以前往观看[js原型对象（二)](http://www.jianshu.com/p/a14db8fc6509)\n","source":"_posts/js原型对象1.md","raw":"---\ntitle: js原型对象1\ndate: 2017-03-20 19:28:35\nauthor:     \"古朋\"\ntags:\n    - 前端开发\n    - JavaScript\n---\n## 为什么要写原型对象？\n\n原型，其实已经是前端知识中老生常谈的内容了。很多初学者和工作者其实都觉得这个概念其实跟你使用JavaScript没有太大的联系（因为我刚开始其实就是这样）。但是当你深入到代码中，一些架构中的时候，你就会发现巧妙的运用原型，能让你的代码写的既简洁又优美\n\n\n\n## 什么是原型对象\n\n无论什么时候，**只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性**，这个**属性**指向**函数**的**原型对象**\n\n举个栗子：\n\n```javascript\nfunction Person{\n}\nPerson.prototype.name = \"Nicholas\";\nPerson.prototype.age = 29;\nPerson.prototype.job = \"Software Engineer\";\nPerson.prototype.sayName = function(){\n\talert(this.name);\n};\n\nvar person1 = new Person();\nperson1.sayName(); //\"Nicholas\"\n\nvar person2 = new Person();\nperson2.sayName(); //\"Nicholas\"\n\nalert(person1.sayName == person2.sayName); //true\n```\n\n如下图图一所示，针对于上面的“栗子”，`Person`是一个函数，那么在 JavaScript中就会为这个函数创建一个prototype的属性，这个prototype属性指向该函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性指向该函数。\n\n\n![图一](http://upload-images.jianshu.io/upload_images/5099107-8d025db6f9977c21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n如上图图一所示：当调用构造函数创建一个新实例（person1和person2）后，该实例的内部将包含一个指针，指向构造函数的原型对象（Person Prototype）。\n\n\n\n## 原型对象的属性查找机制\n\n查找机制是这样的：**首先会先在实例上面搜索属性，如果找到了直接返回，否则就继续去原型上面寻找**。\n\n说个**形象一点的故事**，这样好理解一点。假设：实例就是你，原型就是你的父亲。你的有些东西是继承自你的父亲。比如你父亲在北京有一套价值1000W的别墅，他作为不动产留给了你。你自己也通过自己的努力，积攒了300W的积蓄。这个时候，你急需要用钱，你改怎么办？**首先你会看你自己有没有这个符合条件的积蓄，如果有，那么就用掉自己的积蓄，如果没有，那么就只能用父亲的房子作抵押给别人了。**\n\n先来个栗子：\n\n```javascript\nfunction Person(){\n}\n\nPerson.prototype.money = \"1000W\";\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.money = \"300W\";\nalert(person1.money); //\"300W\"----来自实例，是自己的钱\nalert(person2.money); //\"1000W\"----来自原型，是父亲的钱\n```\n\n从上面的例子我们能发现，当在alert()中访问person1.money时，他就会去实例上面搜索一个名为money的属性。这个属性在person1实例中找到了，直接返回。同理在person2的实例中寻找money属性时，没有找到，这时就需要继续去原型寻找，这个时候找到了，于是返回原型上面的值。\n\n\n\n## 如何判断属性值是来自实例还是原型？\n\n在了解完上面的知识之后，有的人就会问了，那我在写代码的时候，如何去判断属性值是来自实例的，还是来自原型对象上面的？就是说我想知道那个钱，到底我自己的积蓄，还是用的我父亲的房子。这个时候我就可以借助方法hasOwnProperty()，**当属性值是来自实例，也就是说是自己的钱，那么返回true，否则返回false**\n\n来段代码来看看：\n\n```javascript\nfunction Person(){\n}\n\nPerson.prototype.money = \"1000W\";\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.money = \"300W\";\nalert(person1.hasOwnProperty(money)); //true----来自实例，是自己的钱\nalert(person2.hasOwnProperty(money)); //false----来自原型，是父亲的钱\n```\n这一部分讲完了，可以前往观看[js原型对象（二)](http://www.jianshu.com/p/a14db8fc6509)\n","slug":"js原型对象1","published":1,"updated":"2017-03-22T11:30:44.000Z","_id":"cj0kw0lst0001kxjdpuwmmjgz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要写原型对象？\"><a href=\"#为什么要写原型对象？\" class=\"headerlink\" title=\"为什么要写原型对象？\"></a>为什么要写原型对象？</h2><p>原型，其实已经是前端知识中老生常谈的内容了。很多初学者和工作者其实都觉得这个概念其实跟你使用JavaScript没有太大的联系（因为我刚开始其实就是这样）。但是当你深入到代码中，一些架构中的时候，你就会发现巧妙的运用原型，能让你的代码写的既简洁又优美</p>\n<h2 id=\"什么是原型对象\"><a href=\"#什么是原型对象\" class=\"headerlink\" title=\"什么是原型对象\"></a>什么是原型对象</h2><p>无论什么时候，<strong>只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性</strong>，这个<strong>属性</strong>指向<strong>函数</strong>的<strong>原型对象</strong></p>\n<p>举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicholas\"</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</div><div class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</div><div class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person1.sayName(); <span class=\"comment\">//\"Nicholas\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person2.sayName(); <span class=\"comment\">//\"Nicholas\"</span></div><div class=\"line\"></div><div class=\"line\">alert(person1.sayName == person2.sayName); <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>如下图图一所示，针对于上面的“栗子”，<code>Person</code>是一个函数，那么在 JavaScript中就会为这个函数创建一个prototype的属性，这个prototype属性指向该函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性指向该函数。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5099107-8d025db6f9977c21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图一\"></p>\n<p>如上图图一所示：当调用构造函数创建一个新实例（person1和person2）后，该实例的内部将包含一个指针，指向构造函数的原型对象（Person Prototype）。</p>\n<h2 id=\"原型对象的属性查找机制\"><a href=\"#原型对象的属性查找机制\" class=\"headerlink\" title=\"原型对象的属性查找机制\"></a>原型对象的属性查找机制</h2><p>查找机制是这样的：<strong>首先会先在实例上面搜索属性，如果找到了直接返回，否则就继续去原型上面寻找</strong>。</p>\n<p>说个<strong>形象一点的故事</strong>，这样好理解一点。假设：实例就是你，原型就是你的父亲。你的有些东西是继承自你的父亲。比如你父亲在北京有一套价值1000W的别墅，他作为不动产留给了你。你自己也通过自己的努力，积攒了300W的积蓄。这个时候，你急需要用钱，你改怎么办？<strong>首先你会看你自己有没有这个符合条件的积蓄，如果有，那么就用掉自己的积蓄，如果没有，那么就只能用父亲的房子作抵押给别人了。</strong></p>\n<p>先来个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.money = <span class=\"string\">\"1000W\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">person1.money = <span class=\"string\">\"300W\"</span>;</div><div class=\"line\">alert(person1.money); <span class=\"comment\">//\"300W\"----来自实例，是自己的钱</span></div><div class=\"line\">alert(person2.money); <span class=\"comment\">//\"1000W\"----来自原型，是父亲的钱</span></div></pre></td></tr></table></figure>\n<p>从上面的例子我们能发现，当在alert()中访问person1.money时，他就会去实例上面搜索一个名为money的属性。这个属性在person1实例中找到了，直接返回。同理在person2的实例中寻找money属性时，没有找到，这时就需要继续去原型寻找，这个时候找到了，于是返回原型上面的值。</p>\n<h2 id=\"如何判断属性值是来自实例还是原型？\"><a href=\"#如何判断属性值是来自实例还是原型？\" class=\"headerlink\" title=\"如何判断属性值是来自实例还是原型？\"></a>如何判断属性值是来自实例还是原型？</h2><p>在了解完上面的知识之后，有的人就会问了，那我在写代码的时候，如何去判断属性值是来自实例的，还是来自原型对象上面的？就是说我想知道那个钱，到底我自己的积蓄，还是用的我父亲的房子。这个时候我就可以借助方法hasOwnProperty()，<strong>当属性值是来自实例，也就是说是自己的钱，那么返回true，否则返回false</strong></p>\n<p>来段代码来看看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.money = <span class=\"string\">\"1000W\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">person1.money = <span class=\"string\">\"300W\"</span>;</div><div class=\"line\">alert(person1.hasOwnProperty(money)); <span class=\"comment\">//true----来自实例，是自己的钱</span></div><div class=\"line\">alert(person2.hasOwnProperty(money)); <span class=\"comment\">//false----来自原型，是父亲的钱</span></div></pre></td></tr></table></figure>\n<p>这一部分讲完了，可以前往观看<a href=\"http://www.jianshu.com/p/a14db8fc6509\" target=\"_blank\" rel=\"external\">js原型对象（二)</a></p>\n","excerpt":"","more":"<h2 id=\"为什么要写原型对象？\"><a href=\"#为什么要写原型对象？\" class=\"headerlink\" title=\"为什么要写原型对象？\"></a>为什么要写原型对象？</h2><p>原型，其实已经是前端知识中老生常谈的内容了。很多初学者和工作者其实都觉得这个概念其实跟你使用JavaScript没有太大的联系（因为我刚开始其实就是这样）。但是当你深入到代码中，一些架构中的时候，你就会发现巧妙的运用原型，能让你的代码写的既简洁又优美</p>\n<h2 id=\"什么是原型对象\"><a href=\"#什么是原型对象\" class=\"headerlink\" title=\"什么是原型对象\"></a>什么是原型对象</h2><p>无论什么时候，<strong>只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性</strong>，这个<strong>属性</strong>指向<strong>函数</strong>的<strong>原型对象</strong></p>\n<p>举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"Nicholas\"</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">29</span>;</div><div class=\"line\">Person.prototype.job = <span class=\"string\">\"Software Engineer\"</span>;</div><div class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person1.sayName(); <span class=\"comment\">//\"Nicholas\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person2.sayName(); <span class=\"comment\">//\"Nicholas\"</span></div><div class=\"line\"></div><div class=\"line\">alert(person1.sayName == person2.sayName); <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>如下图图一所示，针对于上面的“栗子”，<code>Person</code>是一个函数，那么在 JavaScript中就会为这个函数创建一个prototype的属性，这个prototype属性指向该函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor属性，这个属性指向该函数。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5099107-8d025db6f9977c21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图一\"></p>\n<p>如上图图一所示：当调用构造函数创建一个新实例（person1和person2）后，该实例的内部将包含一个指针，指向构造函数的原型对象（Person Prototype）。</p>\n<h2 id=\"原型对象的属性查找机制\"><a href=\"#原型对象的属性查找机制\" class=\"headerlink\" title=\"原型对象的属性查找机制\"></a>原型对象的属性查找机制</h2><p>查找机制是这样的：<strong>首先会先在实例上面搜索属性，如果找到了直接返回，否则就继续去原型上面寻找</strong>。</p>\n<p>说个<strong>形象一点的故事</strong>，这样好理解一点。假设：实例就是你，原型就是你的父亲。你的有些东西是继承自你的父亲。比如你父亲在北京有一套价值1000W的别墅，他作为不动产留给了你。你自己也通过自己的努力，积攒了300W的积蓄。这个时候，你急需要用钱，你改怎么办？<strong>首先你会看你自己有没有这个符合条件的积蓄，如果有，那么就用掉自己的积蓄，如果没有，那么就只能用父亲的房子作抵押给别人了。</strong></p>\n<p>先来个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.money = <span class=\"string\">\"1000W\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">person1.money = <span class=\"string\">\"300W\"</span>;</div><div class=\"line\">alert(person1.money); <span class=\"comment\">//\"300W\"----来自实例，是自己的钱</span></div><div class=\"line\">alert(person2.money); <span class=\"comment\">//\"1000W\"----来自原型，是父亲的钱</span></div></pre></td></tr></table></figure>\n<p>从上面的例子我们能发现，当在alert()中访问person1.money时，他就会去实例上面搜索一个名为money的属性。这个属性在person1实例中找到了，直接返回。同理在person2的实例中寻找money属性时，没有找到，这时就需要继续去原型寻找，这个时候找到了，于是返回原型上面的值。</p>\n<h2 id=\"如何判断属性值是来自实例还是原型？\"><a href=\"#如何判断属性值是来自实例还是原型？\" class=\"headerlink\" title=\"如何判断属性值是来自实例还是原型？\"></a>如何判断属性值是来自实例还是原型？</h2><p>在了解完上面的知识之后，有的人就会问了，那我在写代码的时候，如何去判断属性值是来自实例的，还是来自原型对象上面的？就是说我想知道那个钱，到底我自己的积蓄，还是用的我父亲的房子。这个时候我就可以借助方法hasOwnProperty()，<strong>当属性值是来自实例，也就是说是自己的钱，那么返回true，否则返回false</strong></p>\n<p>来段代码来看看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.money = <span class=\"string\">\"1000W\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">person1.money = <span class=\"string\">\"300W\"</span>;</div><div class=\"line\">alert(person1.hasOwnProperty(money)); <span class=\"comment\">//true----来自实例，是自己的钱</span></div><div class=\"line\">alert(person2.hasOwnProperty(money)); <span class=\"comment\">//false----来自原型，是父亲的钱</span></div></pre></td></tr></table></figure>\n<p>这一部分讲完了，可以前往观看<a href=\"http://www.jianshu.com/p/a14db8fc6509\">js原型对象（二)</a></p>\n"},{"title":"js原型对象2","date":"2017-03-21T11:28:43.000Z","author":"古朋","_content":"在看下面的内容之前，建议先看我写的[js原型对象（一)](http://www.jianshu.com/p/541051e2ffda)\n\n## 更简单的原型语法\n\n在看了前面栗子之后，你们可能注意到了，每添加一个属性和方法就要敲一遍Person.prototype。为了使代码简洁美观，最常见的做法是用一个包含所有属性的方法的对象字面量来重写整个原型对象。\n\n来看个栗子：\n\n```javascript\nfunction Person(){\n}\nPerson.prototype = {\n  name : \"Lee\",\n  age : 20\n}\n```\n\n但是上面的这种更简单的写法有几个问题：\n\n**1.上面的写法本质上完全重写了默认的prototype对象，因此使得原型中的constructor属性不再指向Person了**。这种情况的时候如果constructor属性很重要，可以像下面这样特意将他设置回适当的值\n\n```javascript\nfunction Person(){\n}\nPerson.prototype = {\n  constructor : Person,//设置回适当的值\n  name : \"Lee\",\n  age : 20\n}\n```\n\n**2.上面的写法在重写了默认的prototype对象，切断了现有原型与任何之前已经存在的对象实例之间的联系，他们引用的仍然是最初的原型**。\n\n下面两个栗子来对比这个问题：\n\n1）没有重写原型对象的栗子：\n\n```javascript\nfunction Person(){\n}\nvar lee = new Person();\nPerson.prototype.name = 'Lee';\nalert(lee.name);//'Lee'\n```\n\n2）重写原型对象的栗子\n\n```javascript\nfunction Person(){\n}\nvar lee = new Person();\nPerson.prototype = {\n  constructor : Person,//设置回适当的值\n  name : \"Lee\",\n  age : 20\n}\nalert(lee.name);//undefined\n```\n\n\n\n## 原型对象的问题\n\n原型中所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性也说得过去，毕竟（上面一篇文章中所示），通过在实例上添加一个同名属性，可以隐藏原型中的对应属性。然而，**对于包含引用类型值的属性就有问题了**。\n\n举个栗子：\n\n```javascript\nfunction Person(){\n}\n\nPerson.prototype = {\n  constructor : Person,//设置回适当的值\n  name : \"Lee\",\n  age : 20,\n  friends : [\"Wang\",\"Tang\"]\n}\nvar p1 = new Person();\nvar p2 = new Person();\n\np1.friends.push(\"Zhang\");\n\nalert(p1.friends);//\"Wang,Tang,Zhang\"\nalert(p2.friends);//\"Wang,Tang,Zhang\"\nalert(p1.friends === p2.friends);//true\n```\n\n在上面的例子中，Person.prototype对象有一个名为friends的属性，该属性包含一个字符串数组。这个属性就是包含引用类型值属性。因为该属性是保存的对这个数组的引用，相当于就是说所有的实例都是公用的同一个这个数组，只要一个人对这个数组进行了修改，其他实例就都会改变。\n","source":"_posts/js原型对象2.md","raw":"---\ntitle: js原型对象2\ndate: 2017-03-21 19:28:43\nauthor:     \"古朋\"\ntags:\n    - 前端开发\n    - JavaScript\n---\n在看下面的内容之前，建议先看我写的[js原型对象（一)](http://www.jianshu.com/p/541051e2ffda)\n\n## 更简单的原型语法\n\n在看了前面栗子之后，你们可能注意到了，每添加一个属性和方法就要敲一遍Person.prototype。为了使代码简洁美观，最常见的做法是用一个包含所有属性的方法的对象字面量来重写整个原型对象。\n\n来看个栗子：\n\n```javascript\nfunction Person(){\n}\nPerson.prototype = {\n  name : \"Lee\",\n  age : 20\n}\n```\n\n但是上面的这种更简单的写法有几个问题：\n\n**1.上面的写法本质上完全重写了默认的prototype对象，因此使得原型中的constructor属性不再指向Person了**。这种情况的时候如果constructor属性很重要，可以像下面这样特意将他设置回适当的值\n\n```javascript\nfunction Person(){\n}\nPerson.prototype = {\n  constructor : Person,//设置回适当的值\n  name : \"Lee\",\n  age : 20\n}\n```\n\n**2.上面的写法在重写了默认的prototype对象，切断了现有原型与任何之前已经存在的对象实例之间的联系，他们引用的仍然是最初的原型**。\n\n下面两个栗子来对比这个问题：\n\n1）没有重写原型对象的栗子：\n\n```javascript\nfunction Person(){\n}\nvar lee = new Person();\nPerson.prototype.name = 'Lee';\nalert(lee.name);//'Lee'\n```\n\n2）重写原型对象的栗子\n\n```javascript\nfunction Person(){\n}\nvar lee = new Person();\nPerson.prototype = {\n  constructor : Person,//设置回适当的值\n  name : \"Lee\",\n  age : 20\n}\nalert(lee.name);//undefined\n```\n\n\n\n## 原型对象的问题\n\n原型中所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性也说得过去，毕竟（上面一篇文章中所示），通过在实例上添加一个同名属性，可以隐藏原型中的对应属性。然而，**对于包含引用类型值的属性就有问题了**。\n\n举个栗子：\n\n```javascript\nfunction Person(){\n}\n\nPerson.prototype = {\n  constructor : Person,//设置回适当的值\n  name : \"Lee\",\n  age : 20,\n  friends : [\"Wang\",\"Tang\"]\n}\nvar p1 = new Person();\nvar p2 = new Person();\n\np1.friends.push(\"Zhang\");\n\nalert(p1.friends);//\"Wang,Tang,Zhang\"\nalert(p2.friends);//\"Wang,Tang,Zhang\"\nalert(p1.friends === p2.friends);//true\n```\n\n在上面的例子中，Person.prototype对象有一个名为friends的属性，该属性包含一个字符串数组。这个属性就是包含引用类型值属性。因为该属性是保存的对这个数组的引用，相当于就是说所有的实例都是公用的同一个这个数组，只要一个人对这个数组进行了修改，其他实例就都会改变。\n","slug":"js原型对象2","published":1,"updated":"2017-03-22T11:30:50.000Z","_id":"cj0kw0lsx0003kxjd0ak866hz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在看下面的内容之前，建议先看我写的<a href=\"http://www.jianshu.com/p/541051e2ffda\" target=\"_blank\" rel=\"external\">js原型对象（一)</a></p>\n<h2 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h2><p>在看了前面栗子之后，你们可能注意到了，每添加一个属性和方法就要敲一遍Person.prototype。为了使代码简洁美观，最常见的做法是用一个包含所有属性的方法的对象字面量来重写整个原型对象。</p>\n<p>来看个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是上面的这种更简单的写法有几个问题：</p>\n<p><strong>1.上面的写法本质上完全重写了默认的prototype对象，因此使得原型中的constructor属性不再指向Person了</strong>。这种情况的时候如果constructor属性很重要，可以像下面这样特意将他设置回适当的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span> : Person,<span class=\"comment\">//设置回适当的值</span></div><div class=\"line\">  name : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2.上面的写法在重写了默认的prototype对象，切断了现有原型与任何之前已经存在的对象实例之间的联系，他们引用的仍然是最初的原型</strong>。</p>\n<p>下面两个栗子来对比这个问题：</p>\n<p>1）没有重写原型对象的栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> lee = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Person.prototype.name = <span class=\"string\">'Lee'</span>;</div><div class=\"line\">alert(lee.name);<span class=\"comment\">//'Lee'</span></div></pre></td></tr></table></figure>\n<p>2）重写原型对象的栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> lee = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span> : Person,<span class=\"comment\">//设置回适当的值</span></div><div class=\"line\">  name : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span></div><div class=\"line\">&#125;</div><div class=\"line\">alert(lee.name);<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<h2 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h2><p>原型中所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性也说得过去，毕竟（上面一篇文章中所示），通过在实例上添加一个同名属性，可以隐藏原型中的对应属性。然而，<strong>对于包含引用类型值的属性就有问题了</strong>。</p>\n<p>举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span> : Person,<span class=\"comment\">//设置回适当的值</span></div><div class=\"line\">  name : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span>,</div><div class=\"line\">  <span class=\"attr\">friends</span> : [<span class=\"string\">\"Wang\"</span>,<span class=\"string\">\"Tang\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">p1.friends.push(<span class=\"string\">\"Zhang\"</span>);</div><div class=\"line\"></div><div class=\"line\">alert(p1.friends);<span class=\"comment\">//\"Wang,Tang,Zhang\"</span></div><div class=\"line\">alert(p2.friends);<span class=\"comment\">//\"Wang,Tang,Zhang\"</span></div><div class=\"line\">alert(p1.friends === p2.friends);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>在上面的例子中，Person.prototype对象有一个名为friends的属性，该属性包含一个字符串数组。这个属性就是包含引用类型值属性。因为该属性是保存的对这个数组的引用，相当于就是说所有的实例都是公用的同一个这个数组，只要一个人对这个数组进行了修改，其他实例就都会改变。</p>\n","excerpt":"","more":"<p>在看下面的内容之前，建议先看我写的<a href=\"http://www.jianshu.com/p/541051e2ffda\">js原型对象（一)</a></p>\n<h2 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h2><p>在看了前面栗子之后，你们可能注意到了，每添加一个属性和方法就要敲一遍Person.prototype。为了使代码简洁美观，最常见的做法是用一个包含所有属性的方法的对象字面量来重写整个原型对象。</p>\n<p>来看个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是上面的这种更简单的写法有几个问题：</p>\n<p><strong>1.上面的写法本质上完全重写了默认的prototype对象，因此使得原型中的constructor属性不再指向Person了</strong>。这种情况的时候如果constructor属性很重要，可以像下面这样特意将他设置回适当的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span> : Person,<span class=\"comment\">//设置回适当的值</span></div><div class=\"line\">  name : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>2.上面的写法在重写了默认的prototype对象，切断了现有原型与任何之前已经存在的对象实例之间的联系，他们引用的仍然是最初的原型</strong>。</p>\n<p>下面两个栗子来对比这个问题：</p>\n<p>1）没有重写原型对象的栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> lee = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Person.prototype.name = <span class=\"string\">'Lee'</span>;</div><div class=\"line\">alert(lee.name);<span class=\"comment\">//'Lee'</span></div></pre></td></tr></table></figure>\n<p>2）重写原型对象的栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> lee = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span> : Person,<span class=\"comment\">//设置回适当的值</span></div><div class=\"line\">  name : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span></div><div class=\"line\">&#125;</div><div class=\"line\">alert(lee.name);<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<h2 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h2><p>原型中所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性也说得过去，毕竟（上面一篇文章中所示），通过在实例上添加一个同名属性，可以隐藏原型中的对应属性。然而，<strong>对于包含引用类型值的属性就有问题了</strong>。</p>\n<p>举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">constructor</span> : Person,<span class=\"comment\">//设置回适当的值</span></div><div class=\"line\">  name : <span class=\"string\">\"Lee\"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span> : <span class=\"number\">20</span>,</div><div class=\"line\">  <span class=\"attr\">friends</span> : [<span class=\"string\">\"Wang\"</span>,<span class=\"string\">\"Tang\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\">p1.friends.push(<span class=\"string\">\"Zhang\"</span>);</div><div class=\"line\"></div><div class=\"line\">alert(p1.friends);<span class=\"comment\">//\"Wang,Tang,Zhang\"</span></div><div class=\"line\">alert(p2.friends);<span class=\"comment\">//\"Wang,Tang,Zhang\"</span></div><div class=\"line\">alert(p1.friends === p2.friends);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>在上面的例子中，Person.prototype对象有一个名为friends的属性，该属性包含一个字符串数组。这个属性就是包含引用类型值属性。因为该属性是保存的对这个数组的引用，相当于就是说所有的实例都是公用的同一个这个数组，只要一个人对这个数组进行了修改，其他实例就都会改变。</p>\n"},{"title":"with语句详解","date":"2017-03-15T15:21:00.000Z","author":"古朋","header-img":"post-bg-2015.jpg","_content":"\nwith这种语法现如今应该已经无人问津了，但是还是想来说说这个在JavaScript中的用法和缺点\n\n## 介绍\n\nwith语句的作用是将代码的作用域设置到一个特定的对象中。\n\n利：with语句可以在不造成性能损失的情况下，减少变量的长度。很多情况下，也可以不使用with语句，而是使用一个临时变量来保存指针，来达到同样的效果。\n\n弊：with语句使得程序在查找该语句块中的所有的变量值时，都是先在该with语句指定的对象下面先寻找一遍，然后再去外面的作用域去寻找。所以尽量不要在该语句块中去使用一些不属于该对象中的变量\n\n## 用法\n\n```javascript\nvar x = {\n  name : \"古朋\",\n  nick_name : \"gupeng\"\n};\nwith(x){\n  console.log(name+'的小名是'+nick_name);\n}\n```\n可以替换为:\n\n```\nvar x = {\n  name : \"古朋\",\n  nick_name : \"gupeng\"\n};\n/*\n *这里将x对象赋值到当前局部变量中，减少不必要的指针路径解析运算\n *一般用于在在方法中将this对象局部化，比如：var this_ = this;\n */\nvar x_ = x;\nconsole.log(x_.name+'的小名是'+x_nick_name);\n```\n","source":"_posts/with.md","raw":"---\ntitle:      \"with语句详解\"\ndate:       2017-03-15 23:21:00\nauthor:     \"古朋\"\nheader-img: \"post-bg-2015.jpg\"\ntags:\n    - 前端开发\n    - JavaScript\n---\n\nwith这种语法现如今应该已经无人问津了，但是还是想来说说这个在JavaScript中的用法和缺点\n\n## 介绍\n\nwith语句的作用是将代码的作用域设置到一个特定的对象中。\n\n利：with语句可以在不造成性能损失的情况下，减少变量的长度。很多情况下，也可以不使用with语句，而是使用一个临时变量来保存指针，来达到同样的效果。\n\n弊：with语句使得程序在查找该语句块中的所有的变量值时，都是先在该with语句指定的对象下面先寻找一遍，然后再去外面的作用域去寻找。所以尽量不要在该语句块中去使用一些不属于该对象中的变量\n\n## 用法\n\n```javascript\nvar x = {\n  name : \"古朋\",\n  nick_name : \"gupeng\"\n};\nwith(x){\n  console.log(name+'的小名是'+nick_name);\n}\n```\n可以替换为:\n\n```\nvar x = {\n  name : \"古朋\",\n  nick_name : \"gupeng\"\n};\n/*\n *这里将x对象赋值到当前局部变量中，减少不必要的指针路径解析运算\n *一般用于在在方法中将this对象局部化，比如：var this_ = this;\n */\nvar x_ = x;\nconsole.log(x_.name+'的小名是'+x_nick_name);\n```\n","slug":"with","published":1,"updated":"2017-03-22T11:27:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0kw0lt40006kxjdbhf1aiwa","content":"<p>with这种语法现如今应该已经无人问津了，但是还是想来说说这个在JavaScript中的用法和缺点</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>with语句的作用是将代码的作用域设置到一个特定的对象中。</p>\n<p>利：with语句可以在不造成性能损失的情况下，减少变量的长度。很多情况下，也可以不使用with语句，而是使用一个临时变量来保存指针，来达到同样的效果。</p>\n<p>弊：with语句使得程序在查找该语句块中的所有的变量值时，都是先在该with语句指定的对象下面先寻找一遍，然后再去外面的作用域去寻找。所以尽量不要在该语句块中去使用一些不属于该对象中的变量</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">\"古朋\"</span>,</div><div class=\"line\">  <span class=\"attr\">nick_name</span> : <span class=\"string\">\"gupeng\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">with</span>(x)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name+<span class=\"string\">'的小名是'</span>+nick_name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以替换为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">\"古朋\"</span>,</div><div class=\"line\">  <span class=\"attr\">nick_name</span> : <span class=\"string\">\"gupeng\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *这里将x对象赋值到当前局部变量中，减少不必要的指针路径解析运算</div><div class=\"line\"> *一般用于在在方法中将this对象局部化，比如：var this_ = this;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> x_ = x;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x_.name+<span class=\"string\">'的小名是'</span>+x_nick_name);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>with这种语法现如今应该已经无人问津了，但是还是想来说说这个在JavaScript中的用法和缺点</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>with语句的作用是将代码的作用域设置到一个特定的对象中。</p>\n<p>利：with语句可以在不造成性能损失的情况下，减少变量的长度。很多情况下，也可以不使用with语句，而是使用一个临时变量来保存指针，来达到同样的效果。</p>\n<p>弊：with语句使得程序在查找该语句块中的所有的变量值时，都是先在该with语句指定的对象下面先寻找一遍，然后再去外面的作用域去寻找。所以尽量不要在该语句块中去使用一些不属于该对象中的变量</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">\"古朋\"</span>,</div><div class=\"line\">  <span class=\"attr\">nick_name</span> : <span class=\"string\">\"gupeng\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">with</span>(x)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name+<span class=\"string\">'的小名是'</span>+nick_name);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以替换为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span> : <span class=\"string\">\"古朋\"</span>,</div><div class=\"line\">  <span class=\"attr\">nick_name</span> : <span class=\"string\">\"gupeng\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> *这里将x对象赋值到当前局部变量中，减少不必要的指针路径解析运算</div><div class=\"line\"> *一般用于在在方法中将this对象局部化，比如：var this_ = this;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> x_ = x;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x_.name+<span class=\"string\">'的小名是'</span>+x_nick_name);</div></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/with/post-bg-2015.jpg","slug":"post-bg-2015.jpg","post":"cj0kw0lt40006kxjdbhf1aiwa","modified":0,"renderable":0},{"_id":"source/_posts/with/post-bg-js-module.jpg","slug":"post-bg-js-module.jpg","post":"cj0kw0lt40006kxjdbhf1aiwa","modified":0,"renderable":0},{"_id":"source/_posts/with/post-bg-unix-linux.jpg","slug":"post-bg-unix-linux.jpg","post":"cj0kw0lt40006kxjdbhf1aiwa","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj0kw0lst0001kxjdpuwmmjgz","tag_id":"cj0kw0lt30005kxjdpbbbvxvt","_id":"cj0kw0lta000akxjdqf8wlwgt"},{"post_id":"cj0kw0lst0001kxjdpuwmmjgz","tag_id":"cj0kw0lt80008kxjdvipw1f7a","_id":"cj0kw0ltb000bkxjdrr7re1e6"},{"post_id":"cj0kw0lsx0003kxjd0ak866hz","tag_id":"cj0kw0lt30005kxjdpbbbvxvt","_id":"cj0kw0ltc000ekxjdko7hhtnw"},{"post_id":"cj0kw0lsx0003kxjd0ak866hz","tag_id":"cj0kw0lt80008kxjdvipw1f7a","_id":"cj0kw0ltc000fkxjdr0ozi7dc"},{"post_id":"cj0kw0lt40006kxjdbhf1aiwa","tag_id":"cj0kw0lt30005kxjdpbbbvxvt","_id":"cj0kw0ltd000hkxjdkzwi0mwj"},{"post_id":"cj0kw0lt40006kxjdbhf1aiwa","tag_id":"cj0kw0lt80008kxjdvipw1f7a","_id":"cj0kw0ltd000ikxjdhit0ohk7"}],"Tag":[{"name":"前端开发","_id":"cj0kw0lt30005kxjdpbbbvxvt"},{"name":"JavaScript","_id":"cj0kw0lt80008kxjdvipw1f7a"}]}}